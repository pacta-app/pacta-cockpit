{"version":3,"sources":["users.js","test.js","Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["UserList","props","List","Datagrid","rowClick","TextField","source","EmailField","UrlField","TestList","Card","CardHeader","title","CardContent","dataProvider","jsonServerProvider","App","Admin","dashboard","Dashboard","logoutButton","Resource","name","list","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qRAGaA,EAAW,SAAAC,GAAK,OAC3B,kBAACC,EAAA,EAASD,EACR,kBAACE,EAAA,EAAD,CAAUC,SAAS,QACjB,kBAACC,EAAA,EAAD,CAAWC,OAAO,OAClB,kBAACD,EAAA,EAAD,CAAWC,OAAO,SAClB,kBAACD,EAAA,EAAD,CAAWC,OAAO,aAClB,kBAACC,EAAA,EAAD,CAAYD,OAAO,UACnB,kBAACD,EAAA,EAAD,CAAWC,OAAO,mBAClB,kBAACD,EAAA,EAAD,CAAWC,OAAO,UAClB,kBAACE,EAAA,EAAD,CAAWF,OAAO,YAClB,kBAACD,EAAA,EAAD,CAAWC,OAAO,oBCVXG,EAAW,SAAAR,GAAK,OAC3B,kBAACC,EAAA,EAASD,EACR,kBAACE,EAAA,EAAD,CAAUC,SAAS,QACjB,kBAACC,EAAA,EAAD,CAAWC,OAAO,OAClB,kBAACD,EAAA,EAAD,CAAWC,OAAO,SAClB,kBAACD,EAAA,EAAD,CAAWC,OAAO,aAClB,kBAACC,EAAA,EAAD,CAAYD,OAAO,UACnB,kBAACD,EAAA,EAAD,CAAWC,OAAO,mBAClB,kBAACD,EAAA,EAAD,CAAWC,OAAO,UAClB,kBAACE,EAAA,EAAD,CAAWF,OAAO,YAClB,kBAACD,EAAA,EAAD,CAAWC,OAAO,oB,2BCRT,oBACX,kBAACI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,wBAClB,kBAACC,EAAA,EAAD,cCAFC,EAAeC,YAAmB,uCAczBC,EAZH,kBACV,kBAACC,EAAA,EAAD,CACEL,MAAM,qBACNM,UAAWC,EACXL,aAAcA,EACdM,aAAc,sCAEd,kBAACC,EAAA,EAAD,CAAUC,KAAK,QAAQC,KAAMd,IAC7B,kBAACY,EAAA,EAAD,CAAUC,KAAK,QAAQC,KAAMvB,MCNbwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d3c9e6bc.chunk.js","sourcesContent":["import React from 'react';\r\nimport { List, Datagrid, TextField, EmailField, UrlField } from 'react-admin';\r\n\r\nexport const UserList = props => (\r\n  <List {...props}>\r\n    <Datagrid rowClick=\"edit\">\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"name\" />\r\n      <TextField source=\"username\" />\r\n      <EmailField source=\"email\" />\r\n      <TextField source=\"address.street\" />\r\n      <TextField source=\"phone\" />\r\n      <UrlField  source=\"website\" />\r\n      <TextField source=\"company.name\" />\r\n    </Datagrid>\r\n  </List>\r\n);","import React from 'react';\r\nimport { List, Datagrid, TextField, EmailField, UrlField } from 'react-admin';\r\n\r\nexport const TestList = props => (\r\n  <List {...props}>\r\n    <Datagrid rowClick=\"edit\">\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"name\" />\r\n      <TextField source=\"username\" />\r\n      <EmailField source=\"email\" />\r\n      <TextField source=\"address.street\" />\r\n      <TextField source=\"phone\" />\r\n      <UrlField  source=\"website\" />\r\n      <TextField source=\"company.name\" />\r\n    </Datagrid>\r\n  </List>\r\n);","import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\n\r\nexport default () => (\r\n    <Card>\r\n        <CardHeader title=\"Welcome Pacta Stats\" />\r\n        <CardContent>...</CardContent>\r\n    </Card>\r\n);","// in src/App.js\nimport React from 'react';\nimport { Admin, Resource } from 'react-admin';\nimport jsonServerProvider from 'ra-data-json-server';\nimport { UserList } from './users';\nimport { TestList } from './test';\nimport Dashboard from './Dashboard';\n\nconst dataProvider = jsonServerProvider('http://jsonplaceholder.typicode.com');\n\nconst App = () => (\n  <Admin\n    title=\"Pacta Stats & More\"\n    dashboard={Dashboard} \n    dataProvider={dataProvider}\n    logoutButton={<div>&nbsp;</div>}\n  >\n    <Resource name=\"tests\" list={TestList} />\n    <Resource name=\"users\" list={UserList} />\n  </Admin>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}